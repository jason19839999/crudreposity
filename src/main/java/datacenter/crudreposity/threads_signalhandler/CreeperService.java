/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package datacenter.crudreposity.threads_signalhandler;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.nio.ByteBuffer;
import java.util.*;

public class CreeperService {

  public interface Iface {

    /**
     * process creeper output, don't save the result
     * 
     * @param json_str the json string to be analyzed.
     * @return the result json string
     * 
     * @param json_str
     */
    public String process(String json_str) throws org.apache.thrift.TException;

    /**
     * process creeper output, and save the result
     * 
     * @param json_str_list the list of json string list to be analyzed.
     * @return the result json string
     * 
     * @param json_str_list
     */
    public String processAndSave(List<String> json_str_list) throws org.apache.thrift.TException;

    /**
     *   * process BigDataGenerater, and save the result to mysql
     *   *
     *   * @param conf_json_str the conf of the tast:
     *   *"{threadNum:10,
     * *keywords:["keyword1","keyword2","keyword3"],
     * *startTime:"2015-11-14 00:00:00",
     * *endTime:"2015-11-18 00:00:00",
     * *big_data_run_name:"name_20151117"}"
     *   * @return the result json string
     * 
     * @param conf_json_str
     */
    public String processBigDataNews(String conf_json_str) throws org.apache.thrift.TException;

    /**
     * get file from hbase
     * 
     * @param rowkey
     */
    public ByteBuffer getBinFile(String rowkey) throws org.apache.thrift.TException;

    /**
     * remove file from hbase
     * 
     * @param rowkey
     */
    public int removeBinFile(String rowkey) throws org.apache.thrift.TException;

    /**
     * add bin file
     * 
     * @param rowkey
     * @param file
     * @param extension
     */
    public int addBinFile(String rowkey, ByteBuffer file, String extension) throws org.apache.thrift.TException;

    /**
     * make  Prospectus rowkey
     * 
     * @param exchange
     * @param code
     * @param date
     * @param title
     * @param source
     */
    public String makeProspectus(String exchange, String code, String date, String title, String source) throws org.apache.thrift.TException;

    /**
     * get Prospectus list
     * 
     * @param exchange
     * @param code
     */
    public String getProspectus(String exchange, String code) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void process(String json_str, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.process_call> resultHandler) throws org.apache.thrift.TException;

    public void processAndSave(List<String> json_str_list, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.processAndSave_call> resultHandler) throws org.apache.thrift.TException;

    public void processBigDataNews(String conf_json_str, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.processBigDataNews_call> resultHandler) throws org.apache.thrift.TException;

    public void getBinFile(String rowkey, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getBinFile_call> resultHandler) throws org.apache.thrift.TException;

    public void removeBinFile(String rowkey, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeBinFile_call> resultHandler) throws org.apache.thrift.TException;

    public void addBinFile(String rowkey, ByteBuffer file, String extension, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addBinFile_call> resultHandler) throws org.apache.thrift.TException;

    public void makeProspectus(String exchange, String code, String date, String title, String source, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.makeProspectus_call> resultHandler) throws org.apache.thrift.TException;

    public void getProspectus(String exchange, String code, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getProspectus_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String process(String json_str) throws org.apache.thrift.TException
    {
      send_process(json_str);
      return recv_process();
    }

    public void send_process(String json_str) throws org.apache.thrift.TException
    {
      process_args args = new process_args();
      args.setJson_str(json_str);
      sendBase("process", args);
    }

    public String recv_process() throws org.apache.thrift.TException
    {
      process_result result = new process_result();
      receiveBase(result, "process");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "process failed: unknown result");
    }

    public String processAndSave(List<String> json_str_list) throws org.apache.thrift.TException
    {
      send_processAndSave(json_str_list);
      return recv_processAndSave();
    }

    public void send_processAndSave(List<String> json_str_list) throws org.apache.thrift.TException
    {
      processAndSave_args args = new processAndSave_args();
      args.setJson_str_list(json_str_list);
      sendBase("processAndSave", args);
    }

    public String recv_processAndSave() throws org.apache.thrift.TException
    {
      processAndSave_result result = new processAndSave_result();
      receiveBase(result, "processAndSave");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "processAndSave failed: unknown result");
    }

    public String processBigDataNews(String conf_json_str) throws org.apache.thrift.TException
    {
      send_processBigDataNews(conf_json_str);
      return recv_processBigDataNews();
    }

    public void send_processBigDataNews(String conf_json_str) throws org.apache.thrift.TException
    {
      processBigDataNews_args args = new processBigDataNews_args();
      args.setConf_json_str(conf_json_str);
      sendBase("processBigDataNews", args);
    }

    public String recv_processBigDataNews() throws org.apache.thrift.TException
    {
      processBigDataNews_result result = new processBigDataNews_result();
      receiveBase(result, "processBigDataNews");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "processBigDataNews failed: unknown result");
    }

    public ByteBuffer getBinFile(String rowkey) throws org.apache.thrift.TException
    {
      send_getBinFile(rowkey);
      return recv_getBinFile();
    }

    public void send_getBinFile(String rowkey) throws org.apache.thrift.TException
    {
      getBinFile_args args = new getBinFile_args();
      args.setRowkey(rowkey);
      sendBase("getBinFile", args);
    }

    public ByteBuffer recv_getBinFile() throws org.apache.thrift.TException
    {
      getBinFile_result result = new getBinFile_result();
      receiveBase(result, "getBinFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBinFile failed: unknown result");
    }

    public int removeBinFile(String rowkey) throws org.apache.thrift.TException
    {
      send_removeBinFile(rowkey);
      return recv_removeBinFile();
    }

    public void send_removeBinFile(String rowkey) throws org.apache.thrift.TException
    {
      removeBinFile_args args = new removeBinFile_args();
      args.setRowkey(rowkey);
      sendBase("removeBinFile", args);
    }

    public int recv_removeBinFile() throws org.apache.thrift.TException
    {
      removeBinFile_result result = new removeBinFile_result();
      receiveBase(result, "removeBinFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeBinFile failed: unknown result");
    }

    public int addBinFile(String rowkey, ByteBuffer file, String extension) throws org.apache.thrift.TException
    {
      send_addBinFile(rowkey, file, extension);
      return recv_addBinFile();
    }

    public void send_addBinFile(String rowkey, ByteBuffer file, String extension) throws org.apache.thrift.TException
    {
      addBinFile_args args = new addBinFile_args();
      args.setRowkey(rowkey);
      args.setFile(file);
      args.setExtension(extension);
      sendBase("addBinFile", args);
    }

    public int recv_addBinFile() throws org.apache.thrift.TException
    {
      addBinFile_result result = new addBinFile_result();
      receiveBase(result, "addBinFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addBinFile failed: unknown result");
    }

    public String makeProspectus(String exchange, String code, String date, String title, String source) throws org.apache.thrift.TException
    {
      send_makeProspectus(exchange, code, date, title, source);
      return recv_makeProspectus();
    }

    public void send_makeProspectus(String exchange, String code, String date, String title, String source) throws org.apache.thrift.TException
    {
      makeProspectus_args args = new makeProspectus_args();
      args.setExchange(exchange);
      args.setCode(code);
      args.setDate(date);
      args.setTitle(title);
      args.setSource(source);
      sendBase("makeProspectus", args);
    }

    public String recv_makeProspectus() throws org.apache.thrift.TException
    {
      makeProspectus_result result = new makeProspectus_result();
      receiveBase(result, "makeProspectus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "makeProspectus failed: unknown result");
    }

    public String getProspectus(String exchange, String code) throws org.apache.thrift.TException
    {
      send_getProspectus(exchange, code);
      return recv_getProspectus();
    }

    public void send_getProspectus(String exchange, String code) throws org.apache.thrift.TException
    {
      getProspectus_args args = new getProspectus_args();
      args.setExchange(exchange);
      args.setCode(code);
      sendBase("getProspectus", args);
    }

    public String recv_getProspectus() throws org.apache.thrift.TException
    {
      getProspectus_result result = new getProspectus_result();
      receiveBase(result, "getProspectus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProspectus failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void process(String json_str, org.apache.thrift.async.AsyncMethodCallback<process_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      process_call method_call = new process_call(json_str, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class process_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String json_str;
      public process_call(String json_str, org.apache.thrift.async.AsyncMethodCallback<process_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.json_str = json_str;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("process", org.apache.thrift.protocol.TMessageType.CALL, 0));
        process_args args = new process_args();
        args.setJson_str(json_str);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_process();
      }
    }

    public void processAndSave(List<String> json_str_list, org.apache.thrift.async.AsyncMethodCallback<processAndSave_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      processAndSave_call method_call = new processAndSave_call(json_str_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class processAndSave_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> json_str_list;
      public processAndSave_call(List<String> json_str_list, org.apache.thrift.async.AsyncMethodCallback<processAndSave_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.json_str_list = json_str_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("processAndSave", org.apache.thrift.protocol.TMessageType.CALL, 0));
        processAndSave_args args = new processAndSave_args();
        args.setJson_str_list(json_str_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_processAndSave();
      }
    }

    public void processBigDataNews(String conf_json_str, org.apache.thrift.async.AsyncMethodCallback<processBigDataNews_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      processBigDataNews_call method_call = new processBigDataNews_call(conf_json_str, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class processBigDataNews_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String conf_json_str;
      public processBigDataNews_call(String conf_json_str, org.apache.thrift.async.AsyncMethodCallback<processBigDataNews_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.conf_json_str = conf_json_str;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("processBigDataNews", org.apache.thrift.protocol.TMessageType.CALL, 0));
        processBigDataNews_args args = new processBigDataNews_args();
        args.setConf_json_str(conf_json_str);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_processBigDataNews();
      }
    }

    public void getBinFile(String rowkey, org.apache.thrift.async.AsyncMethodCallback<getBinFile_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBinFile_call method_call = new getBinFile_call(rowkey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBinFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String rowkey;
      public getBinFile_call(String rowkey, org.apache.thrift.async.AsyncMethodCallback<getBinFile_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rowkey = rowkey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBinFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBinFile_args args = new getBinFile_args();
        args.setRowkey(rowkey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBinFile();
      }
    }

    public void removeBinFile(String rowkey, org.apache.thrift.async.AsyncMethodCallback<removeBinFile_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeBinFile_call method_call = new removeBinFile_call(rowkey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeBinFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String rowkey;
      public removeBinFile_call(String rowkey, org.apache.thrift.async.AsyncMethodCallback<removeBinFile_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rowkey = rowkey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeBinFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeBinFile_args args = new removeBinFile_args();
        args.setRowkey(rowkey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeBinFile();
      }
    }

    public void addBinFile(String rowkey, ByteBuffer file, String extension, org.apache.thrift.async.AsyncMethodCallback<addBinFile_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addBinFile_call method_call = new addBinFile_call(rowkey, file, extension, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addBinFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String rowkey;
      private ByteBuffer file;
      private String extension;
      public addBinFile_call(String rowkey, ByteBuffer file, String extension, org.apache.thrift.async.AsyncMethodCallback<addBinFile_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rowkey = rowkey;
        this.file = file;
        this.extension = extension;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addBinFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addBinFile_args args = new addBinFile_args();
        args.setRowkey(rowkey);
        args.setFile(file);
        args.setExtension(extension);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addBinFile();
      }
    }

    public void makeProspectus(String exchange, String code, String date, String title, String source, org.apache.thrift.async.AsyncMethodCallback<makeProspectus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      makeProspectus_call method_call = new makeProspectus_call(exchange, code, date, title, source, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class makeProspectus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String exchange;
      private String code;
      private String date;
      private String title;
      private String source;
      public makeProspectus_call(String exchange, String code, String date, String title, String source, org.apache.thrift.async.AsyncMethodCallback<makeProspectus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.exchange = exchange;
        this.code = code;
        this.date = date;
        this.title = title;
        this.source = source;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("makeProspectus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        makeProspectus_args args = new makeProspectus_args();
        args.setExchange(exchange);
        args.setCode(code);
        args.setDate(date);
        args.setTitle(title);
        args.setSource(source);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_makeProspectus();
      }
    }

    public void getProspectus(String exchange, String code, org.apache.thrift.async.AsyncMethodCallback<getProspectus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProspectus_call method_call = new getProspectus_call(exchange, code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProspectus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String exchange;
      private String code;
      public getProspectus_call(String exchange, String code, org.apache.thrift.async.AsyncMethodCallback<getProspectus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.exchange = exchange;
        this.code = code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProspectus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProspectus_args args = new getProspectus_args();
        args.setExchange(exchange);
        args.setCode(code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProspectus();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("process", new process());
      processMap.put("processAndSave", new processAndSave());
      processMap.put("processBigDataNews", new processBigDataNews());
      processMap.put("getBinFile", new getBinFile());
      processMap.put("removeBinFile", new removeBinFile());
      processMap.put("addBinFile", new addBinFile());
      processMap.put("makeProspectus", new makeProspectus());
      processMap.put("getProspectus", new getProspectus());
      return processMap;
    }

    private static class process<I extends Iface> extends org.apache.thrift.ProcessFunction<I, process_args> {
      public process() {
        super("process");
      }

      protected process_args getEmptyArgsInstance() {
        return new process_args();
      }

      protected process_result getResult(I iface, process_args args) throws org.apache.thrift.TException {
        process_result result = new process_result();
        result.success = iface.process(args.json_str);
        return result;
      }
    }

    private static class processAndSave<I extends Iface> extends org.apache.thrift.ProcessFunction<I, processAndSave_args> {
      public processAndSave() {
        super("processAndSave");
      }

      protected processAndSave_args getEmptyArgsInstance() {
        return new processAndSave_args();
      }

      protected processAndSave_result getResult(I iface, processAndSave_args args) throws org.apache.thrift.TException {
        processAndSave_result result = new processAndSave_result();
        result.success = iface.processAndSave(args.json_str_list);
        return result;
      }
    }

    private static class processBigDataNews<I extends Iface> extends org.apache.thrift.ProcessFunction<I, processBigDataNews_args> {
      public processBigDataNews() {
        super("processBigDataNews");
      }

      protected processBigDataNews_args getEmptyArgsInstance() {
        return new processBigDataNews_args();
      }

      protected processBigDataNews_result getResult(I iface, processBigDataNews_args args) throws org.apache.thrift.TException {
        processBigDataNews_result result = new processBigDataNews_result();
        result.success = iface.processBigDataNews(args.conf_json_str);
        return result;
      }
    }

    private static class getBinFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBinFile_args> {
      public getBinFile() {
        super("getBinFile");
      }

      protected getBinFile_args getEmptyArgsInstance() {
        return new getBinFile_args();
      }

      protected getBinFile_result getResult(I iface, getBinFile_args args) throws org.apache.thrift.TException {
        getBinFile_result result = new getBinFile_result();
        result.success = iface.getBinFile(args.rowkey);
        return result;
      }
    }

    private static class removeBinFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeBinFile_args> {
      public removeBinFile() {
        super("removeBinFile");
      }

      protected removeBinFile_args getEmptyArgsInstance() {
        return new removeBinFile_args();
      }

      protected removeBinFile_result getResult(I iface, removeBinFile_args args) throws org.apache.thrift.TException {
        removeBinFile_result result = new removeBinFile_result();
        result.success = iface.removeBinFile(args.rowkey);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class addBinFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addBinFile_args> {
      public addBinFile() {
        super("addBinFile");
      }

      protected addBinFile_args getEmptyArgsInstance() {
        return new addBinFile_args();
      }

      protected addBinFile_result getResult(I iface, addBinFile_args args) throws org.apache.thrift.TException {
        addBinFile_result result = new addBinFile_result();
        result.success = iface.addBinFile(args.rowkey, args.file, args.extension);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class makeProspectus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, makeProspectus_args> {
      public makeProspectus() {
        super("makeProspectus");
      }

      protected makeProspectus_args getEmptyArgsInstance() {
        return new makeProspectus_args();
      }

      protected makeProspectus_result getResult(I iface, makeProspectus_args args) throws org.apache.thrift.TException {
        makeProspectus_result result = new makeProspectus_result();
        result.success = iface.makeProspectus(args.exchange, args.code, args.date, args.title, args.source);
        return result;
      }
    }

    private static class getProspectus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProspectus_args> {
      public getProspectus() {
        super("getProspectus");
      }

      protected getProspectus_args getEmptyArgsInstance() {
        return new getProspectus_args();
      }

      protected getProspectus_result getResult(I iface, getProspectus_args args) throws org.apache.thrift.TException {
        getProspectus_result result = new getProspectus_result();
        result.success = iface.getProspectus(args.exchange, args.code);
        return result;
      }
    }

  }

  public static class process_args implements org.apache.thrift.TBase<process_args, process_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("process_args");

    private static final org.apache.thrift.protocol.TField JSON_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("json_str", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new process_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new process_argsTupleSchemeFactory());
    }

    public String json_str; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JSON_STR((short)1, "json_str");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JSON_STR
            return JSON_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JSON_STR, new org.apache.thrift.meta_data.FieldMetaData("json_str", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(process_args.class, metaDataMap);
    }

    public process_args() {
    }

    public process_args(
      String json_str)
    {
      this();
      this.json_str = json_str;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public process_args(process_args other) {
      if (other.isSetJson_str()) {
        this.json_str = other.json_str;
      }
    }

    public process_args deepCopy() {
      return new process_args(this);
    }

    @Override
    public void clear() {
      this.json_str = null;
    }

    public String getJson_str() {
      return this.json_str;
    }

    public process_args setJson_str(String json_str) {
      this.json_str = json_str;
      return this;
    }

    public void unsetJson_str() {
      this.json_str = null;
    }

    /** Returns true if field json_str is set (has been assigned a value) and false otherwise */
    public boolean isSetJson_str() {
      return this.json_str != null;
    }

    public void setJson_strIsSet(boolean value) {
      if (!value) {
        this.json_str = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JSON_STR:
        if (value == null) {
          unsetJson_str();
        } else {
          setJson_str((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JSON_STR:
        return getJson_str();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JSON_STR:
        return isSetJson_str();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof process_args)
        return this.equals((process_args)that);
      return false;
    }

    public boolean equals(process_args that) {
      if (that == null)
        return false;

      boolean this_present_json_str = true && this.isSetJson_str();
      boolean that_present_json_str = true && that.isSetJson_str();
      if (this_present_json_str || that_present_json_str) {
        if (!(this_present_json_str && that_present_json_str))
          return false;
        if (!this.json_str.equals(that.json_str))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(process_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      process_args typedOther = (process_args)other;

      lastComparison = Boolean.valueOf(isSetJson_str()).compareTo(typedOther.isSetJson_str());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJson_str()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json_str, typedOther.json_str);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("process_args(");
      boolean first = true;

      sb.append("json_str:");
      if (this.json_str == null) {
        sb.append("null");
      } else {
        sb.append(this.json_str);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class process_argsStandardSchemeFactory implements SchemeFactory {
      public process_argsStandardScheme getScheme() {
        return new process_argsStandardScheme();
      }
    }

    private static class process_argsStandardScheme extends StandardScheme<process_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, process_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JSON_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.json_str = iprot.readString();
                struct.setJson_strIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, process_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.json_str != null) {
          oprot.writeFieldBegin(JSON_STR_FIELD_DESC);
          oprot.writeString(struct.json_str);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class process_argsTupleSchemeFactory implements SchemeFactory {
      public process_argsTupleScheme getScheme() {
        return new process_argsTupleScheme();
      }
    }

    private static class process_argsTupleScheme extends TupleScheme<process_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, process_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJson_str()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJson_str()) {
          oprot.writeString(struct.json_str);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, process_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.json_str = iprot.readString();
          struct.setJson_strIsSet(true);
        }
      }
    }

  }

  public static class process_result implements org.apache.thrift.TBase<process_result, process_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("process_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new process_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new process_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(process_result.class, metaDataMap);
    }

    public process_result() {
    }

    public process_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public process_result(process_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public process_result deepCopy() {
      return new process_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public process_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof process_result)
        return this.equals((process_result)that);
      return false;
    }

    public boolean equals(process_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(process_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      process_result typedOther = (process_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("process_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class process_resultStandardSchemeFactory implements SchemeFactory {
      public process_resultStandardScheme getScheme() {
        return new process_resultStandardScheme();
      }
    }

    private static class process_resultStandardScheme extends StandardScheme<process_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, process_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, process_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class process_resultTupleSchemeFactory implements SchemeFactory {
      public process_resultTupleScheme getScheme() {
        return new process_resultTupleScheme();
      }
    }

    private static class process_resultTupleScheme extends TupleScheme<process_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, process_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, process_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class processAndSave_args implements org.apache.thrift.TBase<processAndSave_args, processAndSave_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("processAndSave_args");

    private static final org.apache.thrift.protocol.TField JSON_STR_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("json_str_list", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new processAndSave_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new processAndSave_argsTupleSchemeFactory());
    }

    public List<String> json_str_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JSON_STR_LIST((short)1, "json_str_list");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JSON_STR_LIST
            return JSON_STR_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JSON_STR_LIST, new org.apache.thrift.meta_data.FieldMetaData("json_str_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(processAndSave_args.class, metaDataMap);
    }

    public processAndSave_args() {
    }

    public processAndSave_args(
      List<String> json_str_list)
    {
      this();
      this.json_str_list = json_str_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public processAndSave_args(processAndSave_args other) {
      if (other.isSetJson_str_list()) {
        List<String> __this__json_str_list = new ArrayList<String>();
        for (String other_element : other.json_str_list) {
          __this__json_str_list.add(other_element);
        }
        this.json_str_list = __this__json_str_list;
      }
    }

    public processAndSave_args deepCopy() {
      return new processAndSave_args(this);
    }

    @Override
    public void clear() {
      this.json_str_list = null;
    }

    public int getJson_str_listSize() {
      return (this.json_str_list == null) ? 0 : this.json_str_list.size();
    }

    public java.util.Iterator<String> getJson_str_listIterator() {
      return (this.json_str_list == null) ? null : this.json_str_list.iterator();
    }

    public void addToJson_str_list(String elem) {
      if (this.json_str_list == null) {
        this.json_str_list = new ArrayList<String>();
      }
      this.json_str_list.add(elem);
    }

    public List<String> getJson_str_list() {
      return this.json_str_list;
    }

    public processAndSave_args setJson_str_list(List<String> json_str_list) {
      this.json_str_list = json_str_list;
      return this;
    }

    public void unsetJson_str_list() {
      this.json_str_list = null;
    }

    /** Returns true if field json_str_list is set (has been assigned a value) and false otherwise */
    public boolean isSetJson_str_list() {
      return this.json_str_list != null;
    }

    public void setJson_str_listIsSet(boolean value) {
      if (!value) {
        this.json_str_list = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JSON_STR_LIST:
        if (value == null) {
          unsetJson_str_list();
        } else {
          setJson_str_list((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JSON_STR_LIST:
        return getJson_str_list();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JSON_STR_LIST:
        return isSetJson_str_list();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof processAndSave_args)
        return this.equals((processAndSave_args)that);
      return false;
    }

    public boolean equals(processAndSave_args that) {
      if (that == null)
        return false;

      boolean this_present_json_str_list = true && this.isSetJson_str_list();
      boolean that_present_json_str_list = true && that.isSetJson_str_list();
      if (this_present_json_str_list || that_present_json_str_list) {
        if (!(this_present_json_str_list && that_present_json_str_list))
          return false;
        if (!this.json_str_list.equals(that.json_str_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(processAndSave_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      processAndSave_args typedOther = (processAndSave_args)other;

      lastComparison = Boolean.valueOf(isSetJson_str_list()).compareTo(typedOther.isSetJson_str_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJson_str_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json_str_list, typedOther.json_str_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("processAndSave_args(");
      boolean first = true;

      sb.append("json_str_list:");
      if (this.json_str_list == null) {
        sb.append("null");
      } else {
        sb.append(this.json_str_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class processAndSave_argsStandardSchemeFactory implements SchemeFactory {
      public processAndSave_argsStandardScheme getScheme() {
        return new processAndSave_argsStandardScheme();
      }
    }

    private static class processAndSave_argsStandardScheme extends StandardScheme<processAndSave_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, processAndSave_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JSON_STR_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.json_str_list = new ArrayList<String>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    String _elem2; // required
                    _elem2 = iprot.readString();
                    struct.json_str_list.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setJson_str_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, processAndSave_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.json_str_list != null) {
          oprot.writeFieldBegin(JSON_STR_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.json_str_list.size()));
            for (String _iter3 : struct.json_str_list)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class processAndSave_argsTupleSchemeFactory implements SchemeFactory {
      public processAndSave_argsTupleScheme getScheme() {
        return new processAndSave_argsTupleScheme();
      }
    }

    private static class processAndSave_argsTupleScheme extends TupleScheme<processAndSave_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, processAndSave_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJson_str_list()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJson_str_list()) {
          {
            oprot.writeI32(struct.json_str_list.size());
            for (String _iter4 : struct.json_str_list)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, processAndSave_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.json_str_list = new ArrayList<String>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              String _elem7; // required
              _elem7 = iprot.readString();
              struct.json_str_list.add(_elem7);
            }
          }
          struct.setJson_str_listIsSet(true);
        }
      }
    }

  }

  public static class processAndSave_result implements org.apache.thrift.TBase<processAndSave_result, processAndSave_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("processAndSave_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new processAndSave_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new processAndSave_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(processAndSave_result.class, metaDataMap);
    }

    public processAndSave_result() {
    }

    public processAndSave_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public processAndSave_result(processAndSave_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public processAndSave_result deepCopy() {
      return new processAndSave_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public processAndSave_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof processAndSave_result)
        return this.equals((processAndSave_result)that);
      return false;
    }

    public boolean equals(processAndSave_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(processAndSave_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      processAndSave_result typedOther = (processAndSave_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("processAndSave_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class processAndSave_resultStandardSchemeFactory implements SchemeFactory {
      public processAndSave_resultStandardScheme getScheme() {
        return new processAndSave_resultStandardScheme();
      }
    }

    private static class processAndSave_resultStandardScheme extends StandardScheme<processAndSave_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, processAndSave_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, processAndSave_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class processAndSave_resultTupleSchemeFactory implements SchemeFactory {
      public processAndSave_resultTupleScheme getScheme() {
        return new processAndSave_resultTupleScheme();
      }
    }

    private static class processAndSave_resultTupleScheme extends TupleScheme<processAndSave_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, processAndSave_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, processAndSave_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class processBigDataNews_args implements org.apache.thrift.TBase<processBigDataNews_args, processBigDataNews_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("processBigDataNews_args");

    private static final org.apache.thrift.protocol.TField CONF_JSON_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("conf_json_str", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new processBigDataNews_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new processBigDataNews_argsTupleSchemeFactory());
    }

    public String conf_json_str; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONF_JSON_STR((short)1, "conf_json_str");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONF_JSON_STR
            return CONF_JSON_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONF_JSON_STR, new org.apache.thrift.meta_data.FieldMetaData("conf_json_str", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(processBigDataNews_args.class, metaDataMap);
    }

    public processBigDataNews_args() {
    }

    public processBigDataNews_args(
      String conf_json_str)
    {
      this();
      this.conf_json_str = conf_json_str;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public processBigDataNews_args(processBigDataNews_args other) {
      if (other.isSetConf_json_str()) {
        this.conf_json_str = other.conf_json_str;
      }
    }

    public processBigDataNews_args deepCopy() {
      return new processBigDataNews_args(this);
    }

    @Override
    public void clear() {
      this.conf_json_str = null;
    }

    public String getConf_json_str() {
      return this.conf_json_str;
    }

    public processBigDataNews_args setConf_json_str(String conf_json_str) {
      this.conf_json_str = conf_json_str;
      return this;
    }

    public void unsetConf_json_str() {
      this.conf_json_str = null;
    }

    /** Returns true if field conf_json_str is set (has been assigned a value) and false otherwise */
    public boolean isSetConf_json_str() {
      return this.conf_json_str != null;
    }

    public void setConf_json_strIsSet(boolean value) {
      if (!value) {
        this.conf_json_str = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONF_JSON_STR:
        if (value == null) {
          unsetConf_json_str();
        } else {
          setConf_json_str((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONF_JSON_STR:
        return getConf_json_str();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONF_JSON_STR:
        return isSetConf_json_str();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof processBigDataNews_args)
        return this.equals((processBigDataNews_args)that);
      return false;
    }

    public boolean equals(processBigDataNews_args that) {
      if (that == null)
        return false;

      boolean this_present_conf_json_str = true && this.isSetConf_json_str();
      boolean that_present_conf_json_str = true && that.isSetConf_json_str();
      if (this_present_conf_json_str || that_present_conf_json_str) {
        if (!(this_present_conf_json_str && that_present_conf_json_str))
          return false;
        if (!this.conf_json_str.equals(that.conf_json_str))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(processBigDataNews_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      processBigDataNews_args typedOther = (processBigDataNews_args)other;

      lastComparison = Boolean.valueOf(isSetConf_json_str()).compareTo(typedOther.isSetConf_json_str());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConf_json_str()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf_json_str, typedOther.conf_json_str);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("processBigDataNews_args(");
      boolean first = true;

      sb.append("conf_json_str:");
      if (this.conf_json_str == null) {
        sb.append("null");
      } else {
        sb.append(this.conf_json_str);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class processBigDataNews_argsStandardSchemeFactory implements SchemeFactory {
      public processBigDataNews_argsStandardScheme getScheme() {
        return new processBigDataNews_argsStandardScheme();
      }
    }

    private static class processBigDataNews_argsStandardScheme extends StandardScheme<processBigDataNews_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, processBigDataNews_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONF_JSON_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.conf_json_str = iprot.readString();
                struct.setConf_json_strIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, processBigDataNews_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.conf_json_str != null) {
          oprot.writeFieldBegin(CONF_JSON_STR_FIELD_DESC);
          oprot.writeString(struct.conf_json_str);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class processBigDataNews_argsTupleSchemeFactory implements SchemeFactory {
      public processBigDataNews_argsTupleScheme getScheme() {
        return new processBigDataNews_argsTupleScheme();
      }
    }

    private static class processBigDataNews_argsTupleScheme extends TupleScheme<processBigDataNews_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, processBigDataNews_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConf_json_str()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConf_json_str()) {
          oprot.writeString(struct.conf_json_str);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, processBigDataNews_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.conf_json_str = iprot.readString();
          struct.setConf_json_strIsSet(true);
        }
      }
    }

  }

  public static class processBigDataNews_result implements org.apache.thrift.TBase<processBigDataNews_result, processBigDataNews_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("processBigDataNews_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new processBigDataNews_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new processBigDataNews_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(processBigDataNews_result.class, metaDataMap);
    }

    public processBigDataNews_result() {
    }

    public processBigDataNews_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public processBigDataNews_result(processBigDataNews_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public processBigDataNews_result deepCopy() {
      return new processBigDataNews_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public processBigDataNews_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof processBigDataNews_result)
        return this.equals((processBigDataNews_result)that);
      return false;
    }

    public boolean equals(processBigDataNews_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(processBigDataNews_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      processBigDataNews_result typedOther = (processBigDataNews_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("processBigDataNews_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class processBigDataNews_resultStandardSchemeFactory implements SchemeFactory {
      public processBigDataNews_resultStandardScheme getScheme() {
        return new processBigDataNews_resultStandardScheme();
      }
    }

    private static class processBigDataNews_resultStandardScheme extends StandardScheme<processBigDataNews_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, processBigDataNews_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, processBigDataNews_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class processBigDataNews_resultTupleSchemeFactory implements SchemeFactory {
      public processBigDataNews_resultTupleScheme getScheme() {
        return new processBigDataNews_resultTupleScheme();
      }
    }

    private static class processBigDataNews_resultTupleScheme extends TupleScheme<processBigDataNews_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, processBigDataNews_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, processBigDataNews_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBinFile_args implements org.apache.thrift.TBase<getBinFile_args, getBinFile_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBinFile_args");

    private static final org.apache.thrift.protocol.TField ROWKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rowkey", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBinFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBinFile_argsTupleSchemeFactory());
    }

    public String rowkey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROWKEY((short)1, "rowkey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROWKEY
            return ROWKEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROWKEY, new org.apache.thrift.meta_data.FieldMetaData("rowkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBinFile_args.class, metaDataMap);
    }

    public getBinFile_args() {
    }

    public getBinFile_args(
      String rowkey)
    {
      this();
      this.rowkey = rowkey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBinFile_args(getBinFile_args other) {
      if (other.isSetRowkey()) {
        this.rowkey = other.rowkey;
      }
    }

    public getBinFile_args deepCopy() {
      return new getBinFile_args(this);
    }

    @Override
    public void clear() {
      this.rowkey = null;
    }

    public String getRowkey() {
      return this.rowkey;
    }

    public getBinFile_args setRowkey(String rowkey) {
      this.rowkey = rowkey;
      return this;
    }

    public void unsetRowkey() {
      this.rowkey = null;
    }

    /** Returns true if field rowkey is set (has been assigned a value) and false otherwise */
    public boolean isSetRowkey() {
      return this.rowkey != null;
    }

    public void setRowkeyIsSet(boolean value) {
      if (!value) {
        this.rowkey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROWKEY:
        if (value == null) {
          unsetRowkey();
        } else {
          setRowkey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROWKEY:
        return getRowkey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROWKEY:
        return isSetRowkey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBinFile_args)
        return this.equals((getBinFile_args)that);
      return false;
    }

    public boolean equals(getBinFile_args that) {
      if (that == null)
        return false;

      boolean this_present_rowkey = true && this.isSetRowkey();
      boolean that_present_rowkey = true && that.isSetRowkey();
      if (this_present_rowkey || that_present_rowkey) {
        if (!(this_present_rowkey && that_present_rowkey))
          return false;
        if (!this.rowkey.equals(that.rowkey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBinFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBinFile_args typedOther = (getBinFile_args)other;

      lastComparison = Boolean.valueOf(isSetRowkey()).compareTo(typedOther.isSetRowkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowkey, typedOther.rowkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBinFile_args(");
      boolean first = true;

      sb.append("rowkey:");
      if (this.rowkey == null) {
        sb.append("null");
      } else {
        sb.append(this.rowkey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBinFile_argsStandardSchemeFactory implements SchemeFactory {
      public getBinFile_argsStandardScheme getScheme() {
        return new getBinFile_argsStandardScheme();
      }
    }

    private static class getBinFile_argsStandardScheme extends StandardScheme<getBinFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBinFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROWKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rowkey = iprot.readString();
                struct.setRowkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBinFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rowkey != null) {
          oprot.writeFieldBegin(ROWKEY_FIELD_DESC);
          oprot.writeString(struct.rowkey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBinFile_argsTupleSchemeFactory implements SchemeFactory {
      public getBinFile_argsTupleScheme getScheme() {
        return new getBinFile_argsTupleScheme();
      }
    }

    private static class getBinFile_argsTupleScheme extends TupleScheme<getBinFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBinFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRowkey()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRowkey()) {
          oprot.writeString(struct.rowkey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBinFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rowkey = iprot.readString();
          struct.setRowkeyIsSet(true);
        }
      }
    }

  }

  public static class getBinFile_result implements org.apache.thrift.TBase<getBinFile_result, getBinFile_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBinFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBinFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBinFile_resultTupleSchemeFactory());
    }

    public ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBinFile_result.class, metaDataMap);
    }

    public getBinFile_result() {
    }

    public getBinFile_result(
      ByteBuffer success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBinFile_result(getBinFile_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
;
      }
    }

    public getBinFile_result deepCopy() {
      return new getBinFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return success;
    }

    public getBinFile_result setSuccess(byte[] success) {
      setSuccess(success == null ? (ByteBuffer)null : ByteBuffer.wrap(success));
      return this;
    }

    public getBinFile_result setSuccess(ByteBuffer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBinFile_result)
        return this.equals((getBinFile_result)that);
      return false;
    }

    public boolean equals(getBinFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBinFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBinFile_result typedOther = (getBinFile_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBinFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBinFile_resultStandardSchemeFactory implements SchemeFactory {
      public getBinFile_resultStandardScheme getScheme() {
        return new getBinFile_resultStandardScheme();
      }
    }

    private static class getBinFile_resultStandardScheme extends StandardScheme<getBinFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBinFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBinFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBinFile_resultTupleSchemeFactory implements SchemeFactory {
      public getBinFile_resultTupleScheme getScheme() {
        return new getBinFile_resultTupleScheme();
      }
    }

    private static class getBinFile_resultTupleScheme extends TupleScheme<getBinFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBinFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBinFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeBinFile_args implements org.apache.thrift.TBase<removeBinFile_args, removeBinFile_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeBinFile_args");

    private static final org.apache.thrift.protocol.TField ROWKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rowkey", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeBinFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeBinFile_argsTupleSchemeFactory());
    }

    public String rowkey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROWKEY((short)1, "rowkey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROWKEY
            return ROWKEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROWKEY, new org.apache.thrift.meta_data.FieldMetaData("rowkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeBinFile_args.class, metaDataMap);
    }

    public removeBinFile_args() {
    }

    public removeBinFile_args(
      String rowkey)
    {
      this();
      this.rowkey = rowkey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeBinFile_args(removeBinFile_args other) {
      if (other.isSetRowkey()) {
        this.rowkey = other.rowkey;
      }
    }

    public removeBinFile_args deepCopy() {
      return new removeBinFile_args(this);
    }

    @Override
    public void clear() {
      this.rowkey = null;
    }

    public String getRowkey() {
      return this.rowkey;
    }

    public removeBinFile_args setRowkey(String rowkey) {
      this.rowkey = rowkey;
      return this;
    }

    public void unsetRowkey() {
      this.rowkey = null;
    }

    /** Returns true if field rowkey is set (has been assigned a value) and false otherwise */
    public boolean isSetRowkey() {
      return this.rowkey != null;
    }

    public void setRowkeyIsSet(boolean value) {
      if (!value) {
        this.rowkey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROWKEY:
        if (value == null) {
          unsetRowkey();
        } else {
          setRowkey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROWKEY:
        return getRowkey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROWKEY:
        return isSetRowkey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeBinFile_args)
        return this.equals((removeBinFile_args)that);
      return false;
    }

    public boolean equals(removeBinFile_args that) {
      if (that == null)
        return false;

      boolean this_present_rowkey = true && this.isSetRowkey();
      boolean that_present_rowkey = true && that.isSetRowkey();
      if (this_present_rowkey || that_present_rowkey) {
        if (!(this_present_rowkey && that_present_rowkey))
          return false;
        if (!this.rowkey.equals(that.rowkey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeBinFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeBinFile_args typedOther = (removeBinFile_args)other;

      lastComparison = Boolean.valueOf(isSetRowkey()).compareTo(typedOther.isSetRowkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowkey, typedOther.rowkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeBinFile_args(");
      boolean first = true;

      sb.append("rowkey:");
      if (this.rowkey == null) {
        sb.append("null");
      } else {
        sb.append(this.rowkey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeBinFile_argsStandardSchemeFactory implements SchemeFactory {
      public removeBinFile_argsStandardScheme getScheme() {
        return new removeBinFile_argsStandardScheme();
      }
    }

    private static class removeBinFile_argsStandardScheme extends StandardScheme<removeBinFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeBinFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROWKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rowkey = iprot.readString();
                struct.setRowkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeBinFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rowkey != null) {
          oprot.writeFieldBegin(ROWKEY_FIELD_DESC);
          oprot.writeString(struct.rowkey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeBinFile_argsTupleSchemeFactory implements SchemeFactory {
      public removeBinFile_argsTupleScheme getScheme() {
        return new removeBinFile_argsTupleScheme();
      }
    }

    private static class removeBinFile_argsTupleScheme extends TupleScheme<removeBinFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeBinFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRowkey()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRowkey()) {
          oprot.writeString(struct.rowkey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeBinFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rowkey = iprot.readString();
          struct.setRowkeyIsSet(true);
        }
      }
    }

  }

  public static class removeBinFile_result implements org.apache.thrift.TBase<removeBinFile_result, removeBinFile_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeBinFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeBinFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeBinFile_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeBinFile_result.class, metaDataMap);
    }

    public removeBinFile_result() {
    }

    public removeBinFile_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeBinFile_result(removeBinFile_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public removeBinFile_result deepCopy() {
      return new removeBinFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public removeBinFile_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeBinFile_result)
        return this.equals((removeBinFile_result)that);
      return false;
    }

    public boolean equals(removeBinFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeBinFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeBinFile_result typedOther = (removeBinFile_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeBinFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeBinFile_resultStandardSchemeFactory implements SchemeFactory {
      public removeBinFile_resultStandardScheme getScheme() {
        return new removeBinFile_resultStandardScheme();
      }
    }

    private static class removeBinFile_resultStandardScheme extends StandardScheme<removeBinFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeBinFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeBinFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeBinFile_resultTupleSchemeFactory implements SchemeFactory {
      public removeBinFile_resultTupleScheme getScheme() {
        return new removeBinFile_resultTupleScheme();
      }
    }

    private static class removeBinFile_resultTupleScheme extends TupleScheme<removeBinFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeBinFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeBinFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addBinFile_args implements org.apache.thrift.TBase<addBinFile_args, addBinFile_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBinFile_args");

    private static final org.apache.thrift.protocol.TField ROWKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rowkey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("file", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField EXTENSION_FIELD_DESC = new org.apache.thrift.protocol.TField("extension", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBinFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBinFile_argsTupleSchemeFactory());
    }

    public String rowkey; // required
    public ByteBuffer file; // required
    public String extension; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROWKEY((short)1, "rowkey"),
      FILE((short)2, "file"),
      EXTENSION((short)3, "extension");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROWKEY
            return ROWKEY;
          case 2: // FILE
            return FILE;
          case 3: // EXTENSION
            return EXTENSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROWKEY, new org.apache.thrift.meta_data.FieldMetaData("rowkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE, new org.apache.thrift.meta_data.FieldMetaData("file", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.EXTENSION, new org.apache.thrift.meta_data.FieldMetaData("extension", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBinFile_args.class, metaDataMap);
    }

    public addBinFile_args() {
    }

    public addBinFile_args(
      String rowkey,
      ByteBuffer file,
      String extension)
    {
      this();
      this.rowkey = rowkey;
      this.file = file;
      this.extension = extension;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBinFile_args(addBinFile_args other) {
      if (other.isSetRowkey()) {
        this.rowkey = other.rowkey;
      }
      if (other.isSetFile()) {
        this.file = org.apache.thrift.TBaseHelper.copyBinary(other.file);
;
      }
      if (other.isSetExtension()) {
        this.extension = other.extension;
      }
    }

    public addBinFile_args deepCopy() {
      return new addBinFile_args(this);
    }

    @Override
    public void clear() {
      this.rowkey = null;
      this.file = null;
      this.extension = null;
    }

    public String getRowkey() {
      return this.rowkey;
    }

    public addBinFile_args setRowkey(String rowkey) {
      this.rowkey = rowkey;
      return this;
    }

    public void unsetRowkey() {
      this.rowkey = null;
    }

    /** Returns true if field rowkey is set (has been assigned a value) and false otherwise */
    public boolean isSetRowkey() {
      return this.rowkey != null;
    }

    public void setRowkeyIsSet(boolean value) {
      if (!value) {
        this.rowkey = null;
      }
    }

    public byte[] getFile() {
      setFile(org.apache.thrift.TBaseHelper.rightSize(file));
      return file == null ? null : file.array();
    }

    public ByteBuffer bufferForFile() {
      return file;
    }

    public addBinFile_args setFile(byte[] file) {
      setFile(file == null ? (ByteBuffer)null : ByteBuffer.wrap(file));
      return this;
    }

    public addBinFile_args setFile(ByteBuffer file) {
      this.file = file;
      return this;
    }

    public void unsetFile() {
      this.file = null;
    }

    /** Returns true if field file is set (has been assigned a value) and false otherwise */
    public boolean isSetFile() {
      return this.file != null;
    }

    public void setFileIsSet(boolean value) {
      if (!value) {
        this.file = null;
      }
    }

    public String getExtension() {
      return this.extension;
    }

    public addBinFile_args setExtension(String extension) {
      this.extension = extension;
      return this;
    }

    public void unsetExtension() {
      this.extension = null;
    }

    /** Returns true if field extension is set (has been assigned a value) and false otherwise */
    public boolean isSetExtension() {
      return this.extension != null;
    }

    public void setExtensionIsSet(boolean value) {
      if (!value) {
        this.extension = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROWKEY:
        if (value == null) {
          unsetRowkey();
        } else {
          setRowkey((String)value);
        }
        break;

      case FILE:
        if (value == null) {
          unsetFile();
        } else {
          setFile((ByteBuffer)value);
        }
        break;

      case EXTENSION:
        if (value == null) {
          unsetExtension();
        } else {
          setExtension((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROWKEY:
        return getRowkey();

      case FILE:
        return getFile();

      case EXTENSION:
        return getExtension();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROWKEY:
        return isSetRowkey();
      case FILE:
        return isSetFile();
      case EXTENSION:
        return isSetExtension();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBinFile_args)
        return this.equals((addBinFile_args)that);
      return false;
    }

    public boolean equals(addBinFile_args that) {
      if (that == null)
        return false;

      boolean this_present_rowkey = true && this.isSetRowkey();
      boolean that_present_rowkey = true && that.isSetRowkey();
      if (this_present_rowkey || that_present_rowkey) {
        if (!(this_present_rowkey && that_present_rowkey))
          return false;
        if (!this.rowkey.equals(that.rowkey))
          return false;
      }

      boolean this_present_file = true && this.isSetFile();
      boolean that_present_file = true && that.isSetFile();
      if (this_present_file || that_present_file) {
        if (!(this_present_file && that_present_file))
          return false;
        if (!this.file.equals(that.file))
          return false;
      }

      boolean this_present_extension = true && this.isSetExtension();
      boolean that_present_extension = true && that.isSetExtension();
      if (this_present_extension || that_present_extension) {
        if (!(this_present_extension && that_present_extension))
          return false;
        if (!this.extension.equals(that.extension))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addBinFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addBinFile_args typedOther = (addBinFile_args)other;

      lastComparison = Boolean.valueOf(isSetRowkey()).compareTo(typedOther.isSetRowkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRowkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowkey, typedOther.rowkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFile()).compareTo(typedOther.isSetFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file, typedOther.file);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExtension()).compareTo(typedOther.isSetExtension());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExtension()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extension, typedOther.extension);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBinFile_args(");
      boolean first = true;

      sb.append("rowkey:");
      if (this.rowkey == null) {
        sb.append("null");
      } else {
        sb.append(this.rowkey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("file:");
      if (this.file == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.file, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("extension:");
      if (this.extension == null) {
        sb.append("null");
      } else {
        sb.append(this.extension);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBinFile_argsStandardSchemeFactory implements SchemeFactory {
      public addBinFile_argsStandardScheme getScheme() {
        return new addBinFile_argsStandardScheme();
      }
    }

    private static class addBinFile_argsStandardScheme extends StandardScheme<addBinFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBinFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROWKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rowkey = iprot.readString();
                struct.setRowkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.file = iprot.readBinary();
                struct.setFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EXTENSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.extension = iprot.readString();
                struct.setExtensionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBinFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rowkey != null) {
          oprot.writeFieldBegin(ROWKEY_FIELD_DESC);
          oprot.writeString(struct.rowkey);
          oprot.writeFieldEnd();
        }
        if (struct.file != null) {
          oprot.writeFieldBegin(FILE_FIELD_DESC);
          oprot.writeBinary(struct.file);
          oprot.writeFieldEnd();
        }
        if (struct.extension != null) {
          oprot.writeFieldBegin(EXTENSION_FIELD_DESC);
          oprot.writeString(struct.extension);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBinFile_argsTupleSchemeFactory implements SchemeFactory {
      public addBinFile_argsTupleScheme getScheme() {
        return new addBinFile_argsTupleScheme();
      }
    }

    private static class addBinFile_argsTupleScheme extends TupleScheme<addBinFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBinFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRowkey()) {
          optionals.set(0);
        }
        if (struct.isSetFile()) {
          optionals.set(1);
        }
        if (struct.isSetExtension()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRowkey()) {
          oprot.writeString(struct.rowkey);
        }
        if (struct.isSetFile()) {
          oprot.writeBinary(struct.file);
        }
        if (struct.isSetExtension()) {
          oprot.writeString(struct.extension);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBinFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.rowkey = iprot.readString();
          struct.setRowkeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.file = iprot.readBinary();
          struct.setFileIsSet(true);
        }
        if (incoming.get(2)) {
          struct.extension = iprot.readString();
          struct.setExtensionIsSet(true);
        }
      }
    }

  }

  public static class addBinFile_result implements org.apache.thrift.TBase<addBinFile_result, addBinFile_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBinFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBinFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBinFile_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBinFile_result.class, metaDataMap);
    }

    public addBinFile_result() {
    }

    public addBinFile_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBinFile_result(addBinFile_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public addBinFile_result deepCopy() {
      return new addBinFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public addBinFile_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBinFile_result)
        return this.equals((addBinFile_result)that);
      return false;
    }

    public boolean equals(addBinFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addBinFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addBinFile_result typedOther = (addBinFile_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBinFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBinFile_resultStandardSchemeFactory implements SchemeFactory {
      public addBinFile_resultStandardScheme getScheme() {
        return new addBinFile_resultStandardScheme();
      }
    }

    private static class addBinFile_resultStandardScheme extends StandardScheme<addBinFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBinFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBinFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBinFile_resultTupleSchemeFactory implements SchemeFactory {
      public addBinFile_resultTupleScheme getScheme() {
        return new addBinFile_resultTupleScheme();
      }
    }

    private static class addBinFile_resultTupleScheme extends TupleScheme<addBinFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBinFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBinFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class makeProspectus_args implements org.apache.thrift.TBase<makeProspectus_args, makeProspectus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makeProspectus_args");

    private static final org.apache.thrift.protocol.TField EXCHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("exchange", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new makeProspectus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makeProspectus_argsTupleSchemeFactory());
    }

    public String exchange; // required
    public String code; // required
    public String date; // required
    public String title; // required
    public String source; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXCHANGE((short)1, "exchange"),
      CODE((short)2, "code"),
      DATE((short)3, "date"),
      TITLE((short)4, "title"),
      SOURCE((short)5, "source");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXCHANGE
            return EXCHANGE;
          case 2: // CODE
            return CODE;
          case 3: // DATE
            return DATE;
          case 4: // TITLE
            return TITLE;
          case 5: // SOURCE
            return SOURCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXCHANGE, new org.apache.thrift.meta_data.FieldMetaData("exchange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makeProspectus_args.class, metaDataMap);
    }

    public makeProspectus_args() {
    }

    public makeProspectus_args(
      String exchange,
      String code,
      String date,
      String title,
      String source)
    {
      this();
      this.exchange = exchange;
      this.code = code;
      this.date = date;
      this.title = title;
      this.source = source;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeProspectus_args(makeProspectus_args other) {
      if (other.isSetExchange()) {
        this.exchange = other.exchange;
      }
      if (other.isSetCode()) {
        this.code = other.code;
      }
      if (other.isSetDate()) {
        this.date = other.date;
      }
      if (other.isSetTitle()) {
        this.title = other.title;
      }
      if (other.isSetSource()) {
        this.source = other.source;
      }
    }

    public makeProspectus_args deepCopy() {
      return new makeProspectus_args(this);
    }

    @Override
    public void clear() {
      this.exchange = null;
      this.code = null;
      this.date = null;
      this.title = null;
      this.source = null;
    }

    public String getExchange() {
      return this.exchange;
    }

    public makeProspectus_args setExchange(String exchange) {
      this.exchange = exchange;
      return this;
    }

    public void unsetExchange() {
      this.exchange = null;
    }

    /** Returns true if field exchange is set (has been assigned a value) and false otherwise */
    public boolean isSetExchange() {
      return this.exchange != null;
    }

    public void setExchangeIsSet(boolean value) {
      if (!value) {
        this.exchange = null;
      }
    }

    public String getCode() {
      return this.code;
    }

    public makeProspectus_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public String getDate() {
      return this.date;
    }

    public makeProspectus_args setDate(String date) {
      this.date = date;
      return this;
    }

    public void unsetDate() {
      this.date = null;
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return this.date != null;
    }

    public void setDateIsSet(boolean value) {
      if (!value) {
        this.date = null;
      }
    }

    public String getTitle() {
      return this.title;
    }

    public makeProspectus_args setTitle(String title) {
      this.title = title;
      return this;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public String getSource() {
      return this.source;
    }

    public makeProspectus_args setSource(String source) {
      this.source = source;
      return this;
    }

    public void unsetSource() {
      this.source = null;
    }

    /** Returns true if field source is set (has been assigned a value) and false otherwise */
    public boolean isSetSource() {
      return this.source != null;
    }

    public void setSourceIsSet(boolean value) {
      if (!value) {
        this.source = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXCHANGE:
        if (value == null) {
          unsetExchange();
        } else {
          setExchange((String)value);
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((String)value);
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          setTitle((String)value);
        }
        break;

      case SOURCE:
        if (value == null) {
          unsetSource();
        } else {
          setSource((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXCHANGE:
        return getExchange();

      case CODE:
        return getCode();

      case DATE:
        return getDate();

      case TITLE:
        return getTitle();

      case SOURCE:
        return getSource();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXCHANGE:
        return isSetExchange();
      case CODE:
        return isSetCode();
      case DATE:
        return isSetDate();
      case TITLE:
        return isSetTitle();
      case SOURCE:
        return isSetSource();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeProspectus_args)
        return this.equals((makeProspectus_args)that);
      return false;
    }

    public boolean equals(makeProspectus_args that) {
      if (that == null)
        return false;

      boolean this_present_exchange = true && this.isSetExchange();
      boolean that_present_exchange = true && that.isSetExchange();
      if (this_present_exchange || that_present_exchange) {
        if (!(this_present_exchange && that_present_exchange))
          return false;
        if (!this.exchange.equals(that.exchange))
          return false;
      }

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_date = true && this.isSetDate();
      boolean that_present_date = true && that.isSetDate();
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (!this.date.equals(that.date))
          return false;
      }

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      boolean this_present_source = true && this.isSetSource();
      boolean that_present_source = true && that.isSetSource();
      if (this_present_source || that_present_source) {
        if (!(this_present_source && that_present_source))
          return false;
        if (!this.source.equals(that.source))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(makeProspectus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      makeProspectus_args typedOther = (makeProspectus_args)other;

      lastComparison = Boolean.valueOf(isSetExchange()).compareTo(typedOther.isSetExchange());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExchange()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchange, typedOther.exchange);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCode()).compareTo(typedOther.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, typedOther.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDate()).compareTo(typedOther.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, typedOther.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, typedOther.source);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makeProspectus_args(");
      boolean first = true;

      sb.append("exchange:");
      if (this.exchange == null) {
        sb.append("null");
      } else {
        sb.append(this.exchange);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makeProspectus_argsStandardSchemeFactory implements SchemeFactory {
      public makeProspectus_argsStandardScheme getScheme() {
        return new makeProspectus_argsStandardScheme();
      }
    }

    private static class makeProspectus_argsStandardScheme extends StandardScheme<makeProspectus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makeProspectus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXCHANGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.exchange = iprot.readString();
                struct.setExchangeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.date = iprot.readString();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.source = iprot.readString();
                struct.setSourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makeProspectus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exchange != null) {
          oprot.writeFieldBegin(EXCHANGE_FIELD_DESC);
          oprot.writeString(struct.exchange);
          oprot.writeFieldEnd();
        }
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        if (struct.date != null) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
        if (struct.title != null) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
        if (struct.source != null) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          oprot.writeString(struct.source);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makeProspectus_argsTupleSchemeFactory implements SchemeFactory {
      public makeProspectus_argsTupleScheme getScheme() {
        return new makeProspectus_argsTupleScheme();
      }
    }

    private static class makeProspectus_argsTupleScheme extends TupleScheme<makeProspectus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makeProspectus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExchange()) {
          optionals.set(0);
        }
        if (struct.isSetCode()) {
          optionals.set(1);
        }
        if (struct.isSetDate()) {
          optionals.set(2);
        }
        if (struct.isSetTitle()) {
          optionals.set(3);
        }
        if (struct.isSetSource()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetExchange()) {
          oprot.writeString(struct.exchange);
        }
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetDate()) {
          oprot.writeString(struct.date);
        }
        if (struct.isSetTitle()) {
          oprot.writeString(struct.title);
        }
        if (struct.isSetSource()) {
          oprot.writeString(struct.source);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makeProspectus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.exchange = iprot.readString();
          struct.setExchangeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.date = iprot.readString();
          struct.setDateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.title = iprot.readString();
          struct.setTitleIsSet(true);
        }
        if (incoming.get(4)) {
          struct.source = iprot.readString();
          struct.setSourceIsSet(true);
        }
      }
    }

  }

  public static class makeProspectus_result implements org.apache.thrift.TBase<makeProspectus_result, makeProspectus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makeProspectus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new makeProspectus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makeProspectus_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makeProspectus_result.class, metaDataMap);
    }

    public makeProspectus_result() {
    }

    public makeProspectus_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeProspectus_result(makeProspectus_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public makeProspectus_result deepCopy() {
      return new makeProspectus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public makeProspectus_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeProspectus_result)
        return this.equals((makeProspectus_result)that);
      return false;
    }

    public boolean equals(makeProspectus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(makeProspectus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      makeProspectus_result typedOther = (makeProspectus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makeProspectus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makeProspectus_resultStandardSchemeFactory implements SchemeFactory {
      public makeProspectus_resultStandardScheme getScheme() {
        return new makeProspectus_resultStandardScheme();
      }
    }

    private static class makeProspectus_resultStandardScheme extends StandardScheme<makeProspectus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makeProspectus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makeProspectus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makeProspectus_resultTupleSchemeFactory implements SchemeFactory {
      public makeProspectus_resultTupleScheme getScheme() {
        return new makeProspectus_resultTupleScheme();
      }
    }

    private static class makeProspectus_resultTupleScheme extends TupleScheme<makeProspectus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makeProspectus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makeProspectus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProspectus_args implements org.apache.thrift.TBase<getProspectus_args, getProspectus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProspectus_args");

    private static final org.apache.thrift.protocol.TField EXCHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("exchange", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProspectus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProspectus_argsTupleSchemeFactory());
    }

    public String exchange; // required
    public String code; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXCHANGE((short)1, "exchange"),
      CODE((short)2, "code");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXCHANGE
            return EXCHANGE;
          case 2: // CODE
            return CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXCHANGE, new org.apache.thrift.meta_data.FieldMetaData("exchange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProspectus_args.class, metaDataMap);
    }

    public getProspectus_args() {
    }

    public getProspectus_args(
      String exchange,
      String code)
    {
      this();
      this.exchange = exchange;
      this.code = code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProspectus_args(getProspectus_args other) {
      if (other.isSetExchange()) {
        this.exchange = other.exchange;
      }
      if (other.isSetCode()) {
        this.code = other.code;
      }
    }

    public getProspectus_args deepCopy() {
      return new getProspectus_args(this);
    }

    @Override
    public void clear() {
      this.exchange = null;
      this.code = null;
    }

    public String getExchange() {
      return this.exchange;
    }

    public getProspectus_args setExchange(String exchange) {
      this.exchange = exchange;
      return this;
    }

    public void unsetExchange() {
      this.exchange = null;
    }

    /** Returns true if field exchange is set (has been assigned a value) and false otherwise */
    public boolean isSetExchange() {
      return this.exchange != null;
    }

    public void setExchangeIsSet(boolean value) {
      if (!value) {
        this.exchange = null;
      }
    }

    public String getCode() {
      return this.code;
    }

    public getProspectus_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXCHANGE:
        if (value == null) {
          unsetExchange();
        } else {
          setExchange((String)value);
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXCHANGE:
        return getExchange();

      case CODE:
        return getCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXCHANGE:
        return isSetExchange();
      case CODE:
        return isSetCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProspectus_args)
        return this.equals((getProspectus_args)that);
      return false;
    }

    public boolean equals(getProspectus_args that) {
      if (that == null)
        return false;

      boolean this_present_exchange = true && this.isSetExchange();
      boolean that_present_exchange = true && that.isSetExchange();
      if (this_present_exchange || that_present_exchange) {
        if (!(this_present_exchange && that_present_exchange))
          return false;
        if (!this.exchange.equals(that.exchange))
          return false;
      }

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProspectus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProspectus_args typedOther = (getProspectus_args)other;

      lastComparison = Boolean.valueOf(isSetExchange()).compareTo(typedOther.isSetExchange());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExchange()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchange, typedOther.exchange);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCode()).compareTo(typedOther.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, typedOther.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProspectus_args(");
      boolean first = true;

      sb.append("exchange:");
      if (this.exchange == null) {
        sb.append("null");
      } else {
        sb.append(this.exchange);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProspectus_argsStandardSchemeFactory implements SchemeFactory {
      public getProspectus_argsStandardScheme getScheme() {
        return new getProspectus_argsStandardScheme();
      }
    }

    private static class getProspectus_argsStandardScheme extends StandardScheme<getProspectus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProspectus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXCHANGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.exchange = iprot.readString();
                struct.setExchangeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProspectus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exchange != null) {
          oprot.writeFieldBegin(EXCHANGE_FIELD_DESC);
          oprot.writeString(struct.exchange);
          oprot.writeFieldEnd();
        }
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProspectus_argsTupleSchemeFactory implements SchemeFactory {
      public getProspectus_argsTupleScheme getScheme() {
        return new getProspectus_argsTupleScheme();
      }
    }

    private static class getProspectus_argsTupleScheme extends TupleScheme<getProspectus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProspectus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExchange()) {
          optionals.set(0);
        }
        if (struct.isSetCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetExchange()) {
          oprot.writeString(struct.exchange);
        }
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProspectus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.exchange = iprot.readString();
          struct.setExchangeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
      }
    }

  }

  public static class getProspectus_result implements org.apache.thrift.TBase<getProspectus_result, getProspectus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProspectus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProspectus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProspectus_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProspectus_result.class, metaDataMap);
    }

    public getProspectus_result() {
    }

    public getProspectus_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProspectus_result(getProspectus_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getProspectus_result deepCopy() {
      return new getProspectus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getProspectus_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProspectus_result)
        return this.equals((getProspectus_result)that);
      return false;
    }

    public boolean equals(getProspectus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getProspectus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getProspectus_result typedOther = (getProspectus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProspectus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProspectus_resultStandardSchemeFactory implements SchemeFactory {
      public getProspectus_resultStandardScheme getScheme() {
        return new getProspectus_resultStandardScheme();
      }
    }

    private static class getProspectus_resultStandardScheme extends StandardScheme<getProspectus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProspectus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProspectus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProspectus_resultTupleSchemeFactory implements SchemeFactory {
      public getProspectus_resultTupleScheme getScheme() {
        return new getProspectus_resultTupleScheme();
      }
    }

    private static class getProspectus_resultTupleScheme extends TupleScheme<getProspectus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProspectus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProspectus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
